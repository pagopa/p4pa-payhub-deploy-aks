superset:
  # -- User ID directive. This user must have enough permissions to run the bootstrap script (for PROD env we should build a new image which would install the required packages)
  runAsUser: 0 # 65534 cannot use because we need to install some packages first

  # -- Specify rather or not helm should create the secret described in `secret-env.yaml` template
  secretEnv:
    # -- Change to false in order to support externally created secret (Binami "Sealed Secrets" for Kubernetes or External Secrets Operator)
    # note: when externally creating the secret, the chart still expects to pull values from a secret with the name of the release defaults to `release-name-superset-env` - full logic located in _helpers.tpl file: `define "superset.fullname"`
    create: false

  # -- Specify service account name to be used
  serviceAccountName: superset-workload-identity
  serviceAccount:
    create: false

  # -- Install additional packages and do any other bootstrap configuration in this script
  # For production clusters it's recommended to build own image with this step done in CI
  # @default -- see `values.yaml`
  bootstrapScript: |
    #!/bin/bash
    apt update && apt install -y gcc libpq-dev python3-dev pkg-config
    uv pip install psycopg2-binary
    if [ ! -f ~/bootstrap ]; then echo "Running Superset with uid {{ .Values.runAsUser }}" > ~/bootstrap; fi

  # -- Extra environment variables that will be passed into pods
  extraEnv:
    SUPERSET_APP_ROOT: "/analytics" # if you change this, apply the same on probe configurations
    # Different gunicorn settings, refer to the gunicorn documentation
    # https://docs.gunicorn.org/en/stable/settings.html#
    # These variables are used as Flags at the gunicorn startup
    # https://github.com/apache/superset/blob/master/docker/run-server.sh#L22
    # Extend timeout to allow long running queries.
    # GUNICORN_TIMEOUT: 300
    # Increase the gunicorn worker amount, can improve performance drastically
    # See: https://docs.gunicorn.org/en/stable/design.html#how-many-workers
    # SERVER_WORKER_AMOUNT: 4
    # WORKER_MAX_REQUESTS: 0
    # WORKER_MAX_REQUESTS_JITTER: 0
    # SERVER_THREADS_AMOUNT: 20
    # GUNICORN_KEEPALIVE: 2
    # SERVER_LIMIT_REQUEST_LINE: 0
    # SERVER_LIMIT_REQUEST_FIELD_SIZE: 0

    # OAUTH_HOME_DOMAIN: ..
    # # If a whitelist is not set, any address that can use your OAuth2 endpoint will be able to login.
    # #   this includes any random Gmail address if your OAuth2 Web App is set to External.
    # OAUTH_WHITELIST_REGEX: ...

  # -- Extra environment variables in RAW format that will be passed into pods
  extraEnvRaw: []
    # Load DB password from other secret (e.g. for zalando operator)
    # - name: DB_PASS
    #   valueFrom:
    #     secretKeyRef:
    #       name: superset.superset-postgres.credentials.postgresql.acid.zalan.do
    #       key: password


  # -- Extra files to be mounted as ConfigMap on the path specified in `extraConfigMountPath`
  extraConfigs: {}
    # import_datasources.yaml: |
    #     databases:
    #     - allow_file_upload: true
    #       allow_ctas: true
    #       allow_cvas: true
    #       database_name: example-db
    #       extra: "{\r\n    \"metadata_params\": {},\r\n    \"engine_params\": {},\r\n    \"\
    #         metadata_cache_timeout\": {},\r\n    \"schemas_allowed_for_file_upload\": []\r\n\
    #         }"
    #       sqlalchemy_uri: example://example-db.local
    #       tables: []

  extraVolumes: []
    # - name: customConfig
    #   configMap:
    #     name: '{{ template "superset.fullname" . }}-custom-config'
    # - name: additionalSecret
    #   secret:
    #     secretName: my-secret
    #     defaultMode: 0600

  extraVolumeMounts: []
    # - name: customConfig
    #   mountPath: /mnt/config
    #   readOnly: true
    # - name: additionalSecret:
    #   mountPath: /mnt/secret

  # -- A dictionary of overrides to append at the end of superset_config.py - the name does not matter
  # WARNING: the order is not guaranteed
  # Files can be passed as helm --set-file configOverrides.my-override=my-file.py
  configOverrides:
    # extend_timeout: |
    #    # Extend timeout to allow long running queries.
    #    SUPERSET_WEBSERVER_TIMEOUT = ...
    # enable_oauth: |
    #   from flask_appbuilder.security.manager import (AUTH_DB, AUTH_OAUTH)
    #   AUTH_TYPE = AUTH_OAUTH
    #   OAUTH_PROVIDERS = [
    #       {
    #           "name": "google",
    #           "whitelist": [ os.getenv("OAUTH_WHITELIST_REGEX", "") ],
    #           "icon": "fa-google",
    #           "token_key": "access_token",
    #           "remote_app": {
    #               "client_id": os.environ.get("GOOGLE_KEY"),
    #               "client_secret": os.environ.get("GOOGLE_SECRET"),
    #               "api_base_url": "https://www.googleapis.com/oauth2/v2/",
    #               "client_kwargs": {"scope": "email profile"},
    #               "request_token_url": None,
    #               "access_token_url": "https://accounts.google.com/o/oauth2/token",
    #               "authorize_url": "https://accounts.google.com/o/oauth2/auth",
    #               "authorize_params": {"hd": os.getenv("OAUTH_HOME_DOMAIN", "")}
    #           }
    #       }
    #   ]
    #   # Map Authlib roles to superset roles
    #   AUTH_ROLE_ADMIN = 'Admin'
    #   AUTH_ROLE_PUBLIC = 'Public'
    #   # Will allow user self registration, allowing to create Flask users from Authorized User
    #   AUTH_USER_REGISTRATION = True
    #   # The default user self registration role
    #   AUTH_USER_REGISTRATION_ROLE = "Admin"

  # -- Same as above but the values are files
  configOverridesFiles: {}
    # extend_timeout: extend_timeout.py
    # enable_oauth: enable_oauth.py

  configMountPath: "/app/pythonpath"

  extraConfigMountPath: "/app/configs"

  image:
    repository: apachesuperset.docker.scarf.sh/apache/superset
    tag: 6.0.0rc2 # ~ using RC version in order to be able to use a context path different from / (SUPERSET_APP_ROOT env var)
    pullPolicy: IfNotPresent

  imagePullSecrets: []

  initImage:
    repository: apache/superset
    tag: dockerize
    pullPolicy: IfNotPresent

  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      # kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /analytics$1
      nginx.ingress.kubernetes.io/use-regex: 'true'
      ## Extend timeout to allow long running queries.
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    path: /analytics(/?.*)
    pathType: ImplementationSpecific
    extraHostsRaw: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # Superset node configuration
  supersetNode:
    replicas:
      enabled: true

    # -- Startup command
    # @default -- See `values.yaml`
    command:
      - "/bin/sh"
      - "-c"
      - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; /usr/bin/run-server.sh"
    connections:
      # -- Change in case of bringing your own redis and then also set redis.enabled:false
      redis_host: "READ-FROM-ENV"
      redis_port: "READ-FROM-ENV"
      redis_user: "READ-FROM-ENV"
      redis_password: "READ-FROM-ENV"
      redis_cache_db: "1"
      redis_celery_db: "0"
      # Or SSL port is usually 6380
      # Update following for using Redis with SSL
      redis_ssl:
        enabled: true
      # You need to change below configuration incase bringing own PostgresSQL instance and also set postgresql.enabled:false
      # -- Database type for Superset metadata (Supported types: "postgresql", "mysql")
      db_type: "postgresql"
      db_host: "READ-FROM-ENV"
      db_port: "READ-FROM-ENV"
      db_user: "READ-FROM-ENV"
      db_pass: "READ-FROM-ENV"
      db_name: "READ-FROM-ENV"

    env: {}
    # -- If true, forces deployment to reload on each upgrade
    forceReload: false
    # -- Init containers
    # @default -- a container waiting for postgres
    initContainers:
      - name: wait-for-postgres
        image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
        imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
        envFrom:
          - secretRef:
              name: "{{ tpl .Values.envFromSecret . }}"
        command:
          - /bin/sh
          - -c
          - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s

    # -- Launch additional containers into supersetNode pod
    extraContainers: []
    # -- Annotations to be added to supersetNode deployment
    deploymentAnnotations: {}
    # -- Labels to be added to supersetNode deployment
    deploymentLabels: {}
    # -- Affinity to be added to supersetNode deployment
    affinity: {}
    # -- TopologySpreadConstrains to be added to supersetNode deployments
    topologySpreadConstraints: []
    # -- Annotations to be added to supersetNode pods
    podAnnotations: {}
    # -- Labels to be added to supersetNode pods
    podLabels: {}
    startupProbe:
      httpGet:
        path: /analytics/health
        port: http
      initialDelaySeconds: 15
      timeoutSeconds: 1
      failureThreshold: 60
      periodSeconds: 5
      successThreshold: 1
    livenessProbe:
      httpGet:
        path: /analytics/health
        port: http
      initialDelaySeconds: 15
      timeoutSeconds: 1
      failureThreshold: 3
      periodSeconds: 15
      successThreshold: 1
    readinessProbe:
      httpGet:
        path: /analytics/health
        port: http
      initialDelaySeconds: 15
      timeoutSeconds: 1
      failureThreshold: 3
      periodSeconds: 15
      successThreshold: 1
    podSecurityContext:
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext: {} # cannot limit user privileges due to bootstrap needs (see comment at row 2)
      # allowPrivilegeEscalation: false
      # runAsNonRoot: true
      # runAsUser: 65534
      # runAsGroup: 65534

    strategy: {}
      # type: RollingUpdate
      # rollingUpdate:
      #   maxSurge: 25%
      #   maxUnavailable: 25%

  # Superset Celery worker configuration
  supersetWorker:
    replicas:
      enabled: true
    # -- Worker startup command
    # @default -- a `celery worker` command
    command:
      - "/bin/sh"
      - "-c"
      - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker"
    # -- If true, forces deployment to reload on each upgrade
    forceReload: false
    # -- Init container
    # @default -- a container waiting for postgres and redis
    initContainers:
      - name: wait-for-postgres-redis
        image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
        imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
        envFrom:
          - secretRef:
              name: "{{ tpl .Values.envFromSecret . }}"
        command:
          - /bin/sh
          - -c
          - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -wait "tcp://$REDIS_HOST:$REDIS_PORT" -timeout 120s
    # -- Launch additional containers into supersetWorker pod
    extraContainers: []
    # -- Annotations to be added to supersetWorker deployment
    deploymentAnnotations: {}
    # -- Labels to be added to supersetWorker deployment
    deploymentLabels: {}
    # -- Affinity to be added to supersetWorker deployment
    affinity: {}
    # -- TopologySpreadConstrains to be added to supersetWorker deployments
    topologySpreadConstraints: []
    # -- Annotations to be added to supersetWorker pods
    podAnnotations: {}
    # -- Labels to be added to supersetWorker pods
    podLabels: {}
    podSecurityContext:
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext: {} # cannot limit user privileges due to bootstrap needs (see comment at row 2)
    # allowPrivilegeEscalation: false
    # runAsNonRoot: true
    # runAsUser: 65534
    # runAsGroup: 65534
    strategy: {}
      # type: RollingUpdate
      # rollingUpdate:
      #   maxSurge: 25%
      #   maxUnavailable: 25%

  # Superset beat configuration (to trigger scheduled jobs like reports)
  supersetCeleryBeat:
    # -- This is only required if you intend to use alerts and reports
    enabled: false
    # -- Command
    # @default -- a `celery beat` command
    command:
      - "/bin/sh"
      - "-c"
      - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app beat --pidfile /tmp/celerybeat.pid --schedule /tmp/celerybeat-schedule"
    # -- If true, forces deployment to reload on each upgrade
    forceReload: false
    # -- List of init containers
    # @default -- a container waiting for postgres
    initContainers:
      - name: wait-for-postgres-redis
        image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
        imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
        envFrom:
          - secretRef:
              name: "{{ tpl .Values.envFromSecret . }}"
        command:
          - /bin/sh
          - -c
          - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -wait "tcp://$REDIS_HOST:$REDIS_PORT" -timeout 120s
    # -- Launch additional containers into supersetCeleryBeat pods
    extraContainers: []
    # -- Annotations to be added to supersetCeleryBeat deployment
    deploymentAnnotations: {}
    # -- Affinity to be added to supersetCeleryBeat deployment
    affinity: {}
    # -- TopologySpreadConstrains to be added to supersetCeleryBeat deployments
    topologySpreadConstraints: []
    # -- Annotations to be added to supersetCeleryBeat pods
    podAnnotations: {}
    # -- Labels to be added to supersetCeleryBeat pods
    podLabels: {}
    podSecurityContext:
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext: {} # cannot limit user privileges due to bootstrap needs (see comment at row 2)
    # allowPrivilegeEscalation: false
    # runAsNonRoot: true
    # runAsUser: 65534
    # runAsGroup: 65534

  supersetCeleryFlower:
    # -- Enables a Celery flower deployment (management UI to monitor celery jobs)
    # WARNING: on superset 1.x, this requires a Superset image that has `flower<1.0.0` installed (which is NOT the case of the default images)
    # flower>=1.0.0 requires Celery 5+ which Superset 1.5 does not support
    enabled: false
    # -- Command
    # @default -- a `celery flower` command
    command:
      - "/bin/sh"
      - "-c"
      - "celery --app=superset.tasks.celery_app:app flower"
    # -- List of init containers
    # @default -- a container waiting for postgres and redis
    initContainers:
      - name: wait-for-postgres-redis
        image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
        imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
        envFrom:
          - secretRef:
              name: "{{ tpl .Values.envFromSecret . }}"
        command:
          - /bin/sh
          - -c
          - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -wait "tcp://$REDIS_HOST:$REDIS_PORT" -timeout 120s
    # -- Launch additional containers into supersetCeleryFlower pods
    extraContainers: []
    # -- Annotations to be added to supersetCeleryFlower deployment
    deploymentAnnotations: {}
    # -- Affinity to be added to supersetCeleryFlower deployment
    affinity: {}
    # -- TopologySpreadConstrains to be added to supersetCeleryFlower deployments
    topologySpreadConstraints: []
    # -- Annotations to be added to supersetCeleryFlower pods
    podAnnotations: {}
    # -- Labels to be added to supersetCeleryFlower pods
    podLabels: {}
    podSecurityContext:
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext: {} # cannot limit user privileges due to bootstrap needs (see comment at row 2)
    # allowPrivilegeEscalation: false
    # runAsNonRoot: true
    # runAsUser: 65534
    # runAsGroup: 65534

  supersetWebsockets:
    # -- This is only required if you intend to use `GLOBAL_ASYNC_QUERIES` in `ws` mode
    # see https://github.com/apache/superset/blob/master/CONTRIBUTING.md#async-chart-queries
    enabled: false
    replicaCount: 1
    image:
      # -- There is no official image (yet), this one is community-supported
      repository: oneacrefund/superset-websocket
      tag: latest
      pullPolicy: IfNotPresent
    # -- The config.json to pass to the server, see https://github.com/apache/superset/tree/master/superset-websocket
    # Note that the configuration can also read from environment variables (which will have priority), see https://github.com/apache/superset/blob/master/superset-websocket/src/config.ts for a list of supported variables
    # @default -- see `values.yaml`
    config:
      {
        "port": 8080,
        "logLevel": "debug",
        "logToFile": false,
        "logFilename": "app.log",
        "statsd": { "host": "127.0.0.1", "port": 8125, "globalTags": [] },
        "redis":
          {
            "port": 6379,
            "host": "127.0.0.1",
            "password": "",
            "db": 0,
            "ssl": false,
          },
        "redisStreamPrefix": "async-events-",
        "jwtSecret": "CHANGE-ME",
        "jwtCookieName": "async-token",
      }
    service:
      type: ClusterIP
      annotations: {}
      loadBalancerIP: ~
      port: 8080
      nodePort:
        # -- (int)
        http: nil
    command: []
    # -- Launch additional containers into supersetWebsockets pods
    extraContainers: []
    deploymentAnnotations: {}
    # -- Affinity to be added to supersetWebsockets deployment
    affinity: {}
    # -- TopologySpreadConstrains to be added to supersetWebsockets deployments
    topologySpreadConstraints: []
    podAnnotations: {}
    podLabels: {}
    strategy: {}
    podSecurityContext:
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext: {} # cannot limit user privileges due to bootstrap needs (see comment at row 2)
    # allowPrivilegeEscalation: false
    # runAsNonRoot: true
    # runAsUser: 65534
    # runAsGroup: 65534

  init:
    # Configure resources
    # Warning: fab command consumes a lot of ram and can
    # cause the process to be killed due to OOM if it exceeds limit
    # Make sure you are giving a strong password for the admin user creation( else make sure you are changing after setup)
    # Also change the admin email to your own custom email.
    resources: {}
      # limits:
      #   cpu:
      #   memory:
      # requests:
      #   cpu:
      #   memory:
    # -- Command
    # @default -- a `superset_init.sh` command
    command:
      - "/bin/sh"
      - "-c"
      - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; . {{ .Values.configMountPath }}/superset_init.sh"
    enabled: true
    loadExamples: false
    createAdmin: true
    adminUser:
      firstname: Superset
      lastname: Admin
    # -- List of initContainers
    # @default -- a container waiting for postgres
    initContainers:
      - name: wait-for-postgres
        image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
        imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
        envFrom:
          - secretRef:
              name: "{{ tpl .Values.envFromSecret . }}"
        command:
          - /bin/sh
          - -c
          - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s
    # -- A Superset init script
    # @default -- a script to create admin user and initialize roles
    initscript: |-
      #!/bin/sh
      set -eu
      echo "Upgrading DB schema..."
      superset db upgrade
      echo "Initializing roles..."
      superset init
      {{ if .Values.init.createAdmin }}
      echo "Creating admin user..."
      superset fab create-admin \
                      --username $SUPERSET_ADMIN_USER \
                      --firstname {{ .Values.init.adminUser.firstname }} \
                      --lastname {{ .Values.init.adminUser.lastname }} \
                      --email $SUPERSET_ADMIN_EMAIL \
                      --password $SUPERSET_ADMIN_PSW \
                      || true
      {{- end }}
      {{ if .Values.init.loadExamples }}
      echo "Loading examples..."
      superset load_examples
      {{- end }}
      if [ -f "{{ .Values.extraConfigMountPath }}/import_datasources.yaml" ]; then
        echo "Importing database connections.... "
        superset import_datasources -p {{ .Values.extraConfigMountPath }}/import_datasources.yaml
      fi
    # -- Launch additional containers into init job pod
    extraContainers: []
    ## Annotations to be added to init job pods
    podAnnotations: {}
    # Labels to be added to init job pods
    podLabels: {}
    podSecurityContext:
      seccompProfile:
        type: RuntimeDefault
    containerSecurityContext: {} # cannot limit user privileges due to bootstrap needs (see comment at row 2)
    # allowPrivilegeEscalation: false
    # runAsNonRoot: true
    # runAsUser: 65534
    # runAsGroup: 65534
    ## Tolerations to be added to init job pods
    tolerations: []
    ## Affinity to be added to init job pods
    affinity: {}
    # -- TopologySpreadConstrains to be added to init job
    topologySpreadConstraints: []
    # -- Set priorityClassName for init job pods
    priorityClassName: ~

  postgresql:
    ## Set to false if bringing your own PostgreSQL.
    enabled: false

  redis:
    ## Set to false if bringing your own redis.
    enabled: false

  nodeSelector: {}

  tolerations:
    - key: dedicated
      operator: Equal
      value: p4pastats
      effect: NoSchedule

  affinity: {}

  # -- TopologySpreadConstrains to be added to all deployments
  topologySpreadConstraints: []

  # -- Set priorityClassName for superset pods
  priorityClassName: ~