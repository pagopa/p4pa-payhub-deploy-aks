pr: none

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'helm/dev/**'

schedules:
- cron: "12 23 * * *"
  displayName: Nightly batch run
  branches:
    include:
    - main
  always: true

parameters:
- name: ENV
  displayName: Environment
  type: string
  default: dev
  values:
    - dev
    - uat
    - prod

- name: APPS_FOUNDATION
  displayName: Foundation ArgoCD Apps
  type: object
  default:
    - one-color

- name: APPS_OPERATIONAL
  displayName: Operational ArgoCD Apps
  type: object
  default:
    - two-color

- name: APPS_SATELLITE
  displayName: Satellite ArgoCD Apps
  type: object
  default:
    - three-color

- name: POSTMAN_BRANCH
  displayName: Postman branch
  type: string
  default: 'develop'

variables:
  # Variabili statiche
  - name: directoryPattern
    value: 'helm/${{ parameters.ENV }}'
  - name: area
    value: p4pa-payhub

  - ${{ if eq(parameters.ENV, 'dev') }}:
    - name: argocdServer
      value: $(DEV_ARGOCD_SERVER)
    - name: argocdUsername
      value: $(DEV_ARGOCD_USERNAME)
    - name: argocdPassword
      value: $(DEV_ARGOCD_PASSWORD)
    - name: agentPoolName
      value: $(DEV_AGENT_POOL)

  - ${{ if eq(parameters.ENV, 'uat') }}:
    - name: argocdServer
      value: $(UAT_ARGOCD_SERVER)
    - name: argocdUsername
      value: $(UAT_ARGOCD_USERNAME)
    - name: argocdPassword
      value: $(UAT_ARGOCD_PASSWORD)
    - name: agentPoolName
      value: $(UAT_AGENT_POOL)

  - ${{ if eq(parameters.ENV, 'prod') }}:
    - name: argocdServer
      value: $(PROD_ARGOCD_SERVER)
    - name: argocdUsername
      value: $(PROD_ARGOCD_USERNAME)
    - name: argocdPassword
      value: $(PROD_ARGOCD_PASSWORD)
    - name: agentPoolName
      value: $(PROD_AGENT_POOL)

resources:
  repositories:
    - repository: templates
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v6.8.0
      endpoint: 'azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

stages:
  # Debug Steps
  - stage: pre_steps
    condition: succeeded()
    jobs:
    - job: debug_steps
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - script: |
          echo "build reason: ${{variables['Build.Reason']}}"
          echo "agentPoolName: ${{variables['agentPoolName']}}"
          echo "agentPoolName: ${{variables['argocdServer']}}"

  #
  # ArgoCD
  #
  - stage: sync_argo_apps
    condition: succeeded()
    jobs:
      # Foundation Apps
      - template: templates/deploy-argo-template.yml
        parameters:
          applicationsList: ${{ parameters.APPS_FOUNDATION }}
          deploymentType: 'foundation'
          environment: ${{ parameters.ENV }}
          argocdServerUrl: $(argocdServer)
          argocdUserName: $(argocdUsername)
          argocdUserPassword: $(argocdPassword)
          agentPoolName: $(agentPoolName)
          applicationPrefix: $(area)

      # Operational Apps
      - template: templates/deploy-argo-template.yml
        parameters:
          applicationsList: ${{ parameters.APPS_OPERATIONAL }}
          deploymentType: 'operational'
          environment: ${{ parameters.ENV }}
          argocdServerUrl: $(argocdServer)
          argocdUserName: $(argocdUsername)
          argocdUserPassword: $(argocdPassword)
          agentPoolName: $(agentPoolName)
          applicationPrefix: $(area)
          dependsOnJob: 'deploy_foundation'

      # Satellite Apps
      - template: templates/deploy-argo-template.yml
        parameters:
          applicationsList: ${{ parameters.APPS_SATELLITE }}
          deploymentType: 'satellite'
          environment: ${{ parameters.ENV }}
          argocdServerUrl: $(argocdServer)
          argocdUserName: $(argocdUsername)
          argocdUserPassword: $(argocdPassword)
          agentPoolName: $(agentPoolName)
          applicationPrefix: $(area)
          dependsOnJob: 'deploy_operational'

  # Stage separato per i test Postman
  - stage: run_postman_tests
    condition: and(succeeded(), or(${{eq(parameters.ENV, 'dev')}}, ${{eq(parameters.ENV, 'uat')}}))
    dependsOn: sync_argo_apps
    jobs:
      # Foundation Apps Tests
      - template: templates/postman-tests-template.yml
        parameters:
          appsList: ${{ parameters.APPS_FOUNDATION }}
          jobSuffix: 'foundation'
          env: ${{ parameters.ENV }}
          agentPoolName: $(agentPoolName)
          postmanBranch: ${{ parameters.POSTMAN_BRANCH }}

      # Operational Apps Tests
      - template: templates/postman-tests-template.yml
        parameters:
          appsList: ${{ parameters.APPS_OPERATIONAL }}
          jobSuffix: 'operational'
          env: ${{ parameters.ENV }}
          agentPoolName: $(agentPoolName)
          postmanBranch: ${{ parameters.POSTMAN_BRANCH }}

      # Satellite Apps Tests
      - template: templates/postman-tests-template.yml
        parameters:
          appsList: ${{ parameters.APPS_SATELLITE }}
          jobSuffix: 'satellite'
          env: ${{ parameters.ENV }}
          agentPoolName: $(agentPoolName)
          postmanBranch: ${{ parameters.POSTMAN_BRANCH }}
